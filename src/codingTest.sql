## 프로그래머스 - LV4 서울에 위치한 식당 목록 출력하기
SELECT RI.REST_ID, RI.REST_NAME, RI.FOOD_TYPE, RI.FAVORITES, RI.ADDRESS, ROUND(AVG(RR.REVIEW_SCORE), 2) AS REVIEW_SCORE
FROM REST_INFO RI
JOIN REST_REVIEW RR
ON RI.REST_ID = RR.REST_ID
AND RI.ADDRESS LIKE '서울%'
GROUP BY RI.REST_ID
ORDER BY REVIEW_SCORE DESC, RI.FAVORITES DESC

## 프로그래머스 - LV4 오프라인/온라인 판매 데이터 통합하기
(SELECT DATE_Format(SALES_DATE, '%Y-%m-%d') as SALES_DATE, PRODUCT_ID, USER_ID, SALES_AMOUNT
FROM ONLINE_SALE
WHERE MONTH(SALES_DATE) = 3)
UNION
(SELECT DATE_Format(SALES_DATE, '%Y-%m-%d') as SALES_DATE, PRODUCT_ID, NULL AS USER_ID, SALES_AMOUNT
FROM OFFLINE_SALE
WHERE MONTH(SALES_DATE) = 3)
ORDER BY SALES_DATE ASC, PRODUCT_ID ASC, USER_ID ASC

## 프로그래머스 - LV4 특정 세대의 대장균 찾기
SELECT ID
FROM ECOLI_DATA
WHERE PARENT_ID IN
(SELECT ID
FROM ECOLI_DATA
WHERE PARENT_ID IN (SELECT ID FROM ECOLI_DATA WHERE PARENT_ID IS NULL))
ORDER BY ID ASC

## 프로그래머스 - LV5 멸종위기의 대장균 찾기
WITH RECURSIVE generation AS (
SELECT ID, 1 AS GENERATION
FROM ECOLI_DATA
WHERE PARENT_ID IS NULL

UNION ALL

SELECT a.ID, g.GENERATION + 1
FROM ECOLI_DATA a
JOIN generation g
ON a.PARENT_ID = g.ID
)

SELECT COUNT(ID) AS COUNT, GENERATION
FROM generation g
WHERE NOT EXISTS (
  SELECT 1 FROM ECOLI_DATA e WHERE e.PARENT_ID = g.ID
)
GROUP BY GENERATION
ORDER BY GENERATION;